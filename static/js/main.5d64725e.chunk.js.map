{"version":3,"sources":["logo.svg","GameOfLife/Node/Node.jsx","GameOfLife/algorithms.js","GameOfLife/Components/styles/Button.styled.js","GameOfLife/Components/Button.js","GameOfLife/GameOfLife.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Node","_this$props","this","props","col","isAlive","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","react_default","a","createElement","id","concat","className","Component","evolveGrid","grid","_step","allNodes","_step3","nodes","_iterator3","_createForOfIteratorHelper","s","n","done","_step4","value","_iterator4","node","push","err","e","f","getAllNodes","newGrid","getInitialGrid","_iterator","curNode","newNode","Object","objectSpread","isNextIterationAlive","neighbors","length","liveNeighbors","filter","neighbor","UNDERPOPULATION","OVERPOPULATION","isBorn","BIRTH","StyledButton","styled","button","_templateObject","taggedTemplateLiteral","inputColor","hoverColor","Button","disabled","onClick","text","GameOfLife","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","state","mouseIsPressed","isPaused","statesPerSec","resetGrid","setState","getNewGridWithLifeToggled","nodesInShortestPathOrder","_loop","i","setTimeout","document","getElementById","_this2","visualizeGameOfLife","_this3","_this$state","for","type","min","max","onChange","target","map","rowIdx","key","nodeIdx","Node_Node_Node","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","App","GameOfLife_GameOfLife_GameOfLife","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5d64725e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isAlive,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isAlive\n      ? 'node-alive'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n\nimport { BIRTH, getInitialGrid, OVERPOPULATION, UNDERPOPULATION } from \"./GameOfLife\";\n\nexport function evolveGrid(grid) {\n\tconst allNodes = getAllNodes(grid);\n\tconst newGrid = getInitialGrid();\n\tfor (const curNode of allNodes) {\n\t\tconst newNode = {\n\t\t\t...curNode,\n\t\t\tisAlive: isNextIterationAlive(curNode, grid)\n\t\t}\n\t\tnewGrid[curNode.row][curNode.col] = newNode;\n\t}\n\treturn newGrid\n}\n\nfunction isNextIterationAlive(node, grid) {\n\tconst neighbors = [];\n\tconst {col, row} = node;\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\tif (row > 0 && col > 0) \t\t\t\t\tneighbors.push(grid[row - 1][col - 1]);\n\tif (row > 0 && col < grid[0].length - 1) \tneighbors.push(grid[row - 1][col + 1]);\n\tif (row < grid.length - 1 && col > 0) \t\tneighbors.push(grid[row + 1][col - 1]);\n\tif (row < grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row + 1][col + 1]);\n\tconst liveNeighbors = neighbors.filter(neighbor => neighbor.isAlive).length;\n\t\n\tif (node.isAlive) {\n\t\tconst survives = UNDERPOPULATION < liveNeighbors && liveNeighbors < OVERPOPULATION;\n\t\tif (survives) {\n\t\t}\n\t\treturn UNDERPOPULATION < liveNeighbors && liveNeighbors < OVERPOPULATION;\n\t}\n\telse {\n\t\tconst isBorn = liveNeighbors === BIRTH;\n\t\tif (isBorn) {\n\t\t}\n\t\treturn isBorn;\n\t}\n}\n\n\n  \n  function sortNodesByDistance(unvisitedNodes) {\n\tunvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \nfunction updateUnvisitedNeighbors(node, grid) {\n\tconst unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\tfor (const neighbor of unvisitedNeighbors) {\n\t  neighbor.distance = node.distance + 1;\n\t  neighbor.previousNode = node;\n\t}\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n\tconst neighbors = [];\n\tconst {col, row} = node;\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\treturn neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getAllNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t  for (const node of row) {\n\t\tnodes.push(node);\n\t  }\n\t}\n\treturn nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n\tconst nodesInShortestPathOrder = [];\n\tlet currentNode = finishNode;\n\twhile (currentNode !== null) {\n\t  nodesInShortestPathOrder.unshift(currentNode);\n\t  currentNode = currentNode.previousNode;\n\t}\n\treturn nodesInShortestPathOrder;\n  }","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const StyledButton = styled.button`\n    background: transparent;\n    background-color: ${props => props.inputColor || \"lightblue\"};\n    color: black;\n    border-radius: 5px;\n    outline: 0;\n    margin: 10px 10px;\n    cursor: pointer;\n    box-shadow: 0px 2px 2px lightgray;\n    transition: ease background-color 250ms;\n    &:hover {\n    background-color: ${props => props.hoverColor || \"red\"};\n    }\n    &:disabled {\n    cursor: default;\n    opacity: 0.7;\n    }\n`","import { StyledButton } from \"./styles/Button.styled\";\nimport React from \"react\";\n\nexport default function Button(props) {\n    return (\n        <StyledButton hoverColor = {props.hoverColor} disabled={props.disabled} onClick={props.onClick}>\n            {props.text}\n        </StyledButton>\n    )\n}","import './GameOfLife.css';\nimport React, {Component} from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, evolveGrid, getNodesInShortestPathOrder } from './algorithms';\nimport Button from './Components/Button';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst NUM_ROWS = 22;\nconst NUM_COLS = 33;\nexport const UNDERPOPULATION = 1;\nexport const OVERPOPULATION = 5;\nexport const BIRTH = 3;\n\nexport default class GameOfLife extends Component {\n    constructor() {\n        super();\n        console.log('I was triggered during constructor');\n        this.state = {\n          grid: [],\n          mouseIsPressed: false,\n          isPaused: true,\n          statesPerSec: 2,\n        };\n    }\n    \n    componentDidMount() {\n      this.resetGrid();\n    }\n\n    resetGrid() {\n      const grid = getInitialGrid();\n      this.setState({grid});\n    }\n    \n    handleMouseDown(row, col) {\n      const newGrid = getNewGridWithLifeToggled(this.state.grid, row, col);\n      this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n  \n    handleMouseEnter(row, col) {\n      if (!this.state.mouseIsPressed) return;\n      const newGrid = getNewGridWithLifeToggled(this.state.grid, row, col);\n      this.setState({grid: newGrid});\n    }\n  \n    handleMouseUp() {\n      this.setState({mouseIsPressed: false});\n    }\n  \n    // animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    //   for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n    //     if (i === visitedNodesInOrder.length) {\n    //       setTimeout(() => {\n    //         this.animateShortestPath(nodesInShortestPathOrder);\n    //       }, 10 * i);\n    //       return;\n    //     }\n    //     setTimeout(() => {\n    //       const node = visitedNodesInOrder[i];\n    //       document.getElementById(`node-${node.row}-${node.col}`).className =\n    //         'node node-visited';\n    //     }, 10 * i);\n    //   }\n    // }\n    \n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    visualizeGameOfLife() {\n      console.log(\"starting game of life\");\n      this.setState({isPaused: false});\n      setTimeout(() => {\n        const curGrid = this.state.grid;\n        const newGrid = evolveGrid(curGrid);\n        if (!this.state.isPaused) {\n          this.setState({grid: newGrid});\n          this.visualizeGameOfLife();\n        }\n      }, (1 / this.state.statesPerSec) * 1000 );\n    }\n  \n    render() {\n      const {grid, mouseIsPressed} = this.state;\n      const handleSliderChange = (e) => this.setState({statesPerSec: e.target.value})\n      console.log('I was triggered during render');\n      return (\n        <div>\n          <h1>Conway's Game of Life</h1>\n          <div>\n            <Button text=\"Start\" hoverColor=\"green\" disabled={!this.state.isPaused} onClick={() => this.visualizeGameOfLife()}></Button>\n            <Button text=\"Stop\" onClick={() => this.setState({isPaused: true})}></Button>\n            <Button text=\"Clear\" onClick={() => this.resetGrid()}></Button>\n            <Button text=\"Print Grid\" onClick={() => console.log(this.state.grid)}></Button>\n            <label id=\"bar-label\" for=\"speedbar\">Speed</label>\n            <input type=\"range\" id=\"speedbar\" min=\"0.2\" max=\"10\" value={this.state.statesPerSec} onChange={handleSliderChange}></input>\n          </div>\n          <div>\n          </div>\n            <div className=\"grid\" id=\"game-grid\">\n              {grid.map((row, rowIdx) => {\n                return (\n                  <div className=\"grid-row\" key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                      const {row, col, isAlive} = node;\n                      return (\n                        <Node\n                          key={nodeIdx}\n                          col={col}\n                          isAlive={isAlive}\n                          mouseIsPressed={mouseIsPressed}\n                          onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                          onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                          }\n                          onMouseUp={() => this.handleMouseUp()}\n                          row={row}></Node>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n        </div>\n      );\n    }\n}\n\nexport const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLS; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  // const createNode = (col, row) => {\n  //   return {\n  //     col,\n  //     row,\n  //     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n  //     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n  //     distance: Infinity,\n  //     isVisited: false,\n  //     isWall: false,\n  //     previousNode: null,\n  //   };\n  // };\n\n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isAlive: false,\n    };\n  };\n\n  // const getNewGridWithWallToggled = (grid, row, col) => {\n  //   const newGrid = grid.slice();\n  //   const node = newGrid[row][col];\n  //   const newNode = {\n  //     ...node,\n  //     isWall: !node.isWall,\n  //   };\n  //   newGrid[row][col] = newNode;\n  //   return newGrid;\n  // };\n\n  const getNewGridWithLifeToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isAlive: !node.isAlive,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n","import logo from './logo.svg';\nimport './App.css';\nimport GameOfLife from './GameOfLife/GameOfLife';\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameOfLife></GameOfLife>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}